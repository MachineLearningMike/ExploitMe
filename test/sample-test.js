const { BN, constants, expectEvent, expectRevert} = require('@openzeppelin/test-helpers')
const { expect, assert } = require("chai");
const { ethers, upgrades, network } = require("hardhat");

var ExploitMeContract, ExploitMeContract2;
var ExploitorContract, ExploitorContract2;
var Alice, Bob, Charlie;

const DECIMALS = 18;
function weiToEthEn(wei) { return Number(ethers.utils.formatUnits(wei.toString(), DECIMALS)).toLocaleString('en') }
function weiToEth(wei) { return Number(ethers.utils.formatUnits(wei.toString(), DECIMALS)) }
function ethToWei(eth) { return ethers.utils.parseUnits(eth.toString(), DECIMALS); }
function uiAddr(address) { return "{0x" + address.substring(2, 6).concat('...') + "}" ; }

describe("Build a test bed for ExploitMe.", function () {

	it("Test signers, defined in your hardhat.config.js, are ready.".green, async function () {
		[Master, Alice, Bob, Charlie] = await ethers.getSigners();
		console.log("\tMaster's address = %s, balance = %s ETH.", uiAddr(addr = await Master.getAddress()), weiToEthEn(await ethers.provider.getBalance(addr)) );
		console.log("\tAlice's address = %s, balance = %s ETH.", uiAddr(addr = await Alice.getAddress()), weiToEthEn(await ethers.provider.getBalance(addr)) );
		console.log("\tBob's address = %s, balance = %s ETH.", uiAddr(addr = await Bob.getAddress()), weiToEthEn(await ethers.provider.getBalance(addr)) );
		console.log("\tCharlie's address = %s, balance = %s ETH.", uiAddr(addr = await Charlie.getAddress()), weiToEthEn(await ethers.provider.getBalance(addr)) );
	});

  it("Deploy ExploitMe contract.", async function () {
    const ExploitMe = await ethers.getContractFactory("ExploitMe", Alice);
    ExploitMeContract = await ExploitMe.deploy();
    await ExploitMeContract.deployed();

    const ExploitMe2 = await ethers.getContractFactory("ExploitMe2", Alice);
    ExploitMeContract2 = await ExploitMe2.deploy();
    await ExploitMeContract2.deployed();

    var balance = await ethers.provider.getBalance(ExploitMeContract.address);
    console.log("\tbalance of ExploitMe: %s ETH.", balance);
  });

  it("Deploy Exploitor contract.", async function () {
    const Exploitor = await ethers.getContractFactory("Exploitor", Bob);
    ExploitorContract = await Exploitor.deploy(ExploitMeContract.address);
    await ExploitorContract.deployed();

    var amount = 10;
    var tx = await Bob.sendTransaction({
      to: ExploitorContract.address,
      value: ethToWei(amount),
    });
    await tx.wait();

    var balance = await ethers.provider.getBalance(ExploitorContract.address);
    console.log("\tbalance of Exploitor: %s ETH.", weiToEthEn(balance));
  });

  it("Deploy Exploitor2 contract.", async function () {
    const Exploitor2 = await ethers.getContractFactory("Exploitor", Bob);
    ExploitorContract2 = await Exploitor2.deploy(ExploitMeContract2.address);
    await ExploitorContract2.deployed();

    var amount = 10;
    var tx = await Bob.sendTransaction({
      to: ExploitorContract2.address,
      value: ethToWei(amount),
    });
    await tx.wait();

    var balance = await ethers.provider.getBalance(ExploitorContract2.address);
    console.log("\tbalance of Exploitor: %s ETH.", weiToEthEn(balance));
  });
});

describe("Deposit more than 1 ether on Explo in a single block.", function () {
  it("Deposit 1 ETH directly.", async function () {
    var balance = await ethers.provider.getBalance(ExploitMeContract.address);
    console.log("\tTester: balance of ExploitMe: %s ETH.", weiToEthEn(balance) );

    var amount = 1;
    var tx = await Alice.sendTransaction({
      to: ExploitMeContract.address,
      value: ethToWei(amount),
    });
    await tx.wait();
    console.log("\tAlice sent %s ETH to ExploitMe.", amount.toLocaleString('En'));

    var balance = await ethers.provider.getBalance(ExploitMeContract.address);
    console.log("\tTester: balance of ExploitMe: %s ETH.", weiToEthEn(balance) );
  });


  it("Deposit on ExploitMe in a trickish manner via the ExploitorConatract.".yellow, async function () {

    ExploitorContract = ExploitorContract.connect(Charlie);

    var balance0 = await ethers.provider.getBalance(await ExploitorContract.exploitMeAddr());
    console.log("\tCharlie: Balance0 = ", BigInt(balance0));
 
    var tx = await ExploitorContract.depositTricky(2);
    await tx.wait();

    var balance1 = await ethers.provider.getBalance(await ExploitorContract.exploitMeAddr());
    console.log("\tCharlie: Balance1 = ", BigInt(balance1));
  });


  it("Deposit, once more, on ExploitMe in a trickish manner via the ExploitorConatract.".yellow, async function () {

    ExploitorContract = ExploitorContract.connect(Charlie);

    var balance0 = await ethers.provider.getBalance(await ExploitorContract.exploitMeAddr());
    console.log("\tCharlie: Balance0 = ", BigInt(balance0));
 
    var tx = await ExploitorContract.depositTricky(5);
    await tx.wait();

    var balance1 = await ethers.provider.getBalance(await ExploitorContract.exploitMeAddr());
    console.log("\tCharlie: Balance1 = ", BigInt(balance1));
  });
  
  it("Deposit on ExploitMe2 in a trickish manner via the ExploitorConatract2.".yellow, async function () {

    ExploitorContract2 = ExploitorContract2.connect(Charlie);

    var balance0 = await ethers.provider.getBalance(await ExploitorContract2.exploitMeAddr());
    console.log("\tCharlie: Balance0 = ", BigInt(balance0));
 
    var tx = await ExploitorContract2.depositTricky(5);
    await tx.wait();

    var balance1 = await ethers.provider.getBalance(await ExploitorContract2.exploitMeAddr());
    console.log("\tCharlie: Balance1 = ", BigInt(balance1));
  });


});
