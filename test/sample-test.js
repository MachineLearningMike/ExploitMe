const { BN, constants, expectEvent, expectRevert} = require('@openzeppelin/test-helpers')
const { expect, assert } = require("chai");
const { ethers, upgrades, network } = require("hardhat");

describe("Greeter", function () {
  it("Should return the new greeting once it's changed", async function () {
    const Greeter = await ethers.getContractFactory("Greeter");
    const greeter = await Greeter.deploy("Hello, world!");
    await greeter.deployed();

    expect(await greeter.greet()).to.equal("Hello, world!");

    const setGreetingTx = await greeter.setGreeting("Hola, mundo!");

    // wait until the transaction is mined
    await setGreetingTx.wait();

    expect(await greeter.greet()).to.equal("Hola, mundo!");
  }); 
});

var ExploitMeContract;
var ExploitorContract;
var Alice, Bob, Charlie;

const DECIMALS = 18;
function weiToEthEn(wei) { return Number(ethers.utils.formatUnits(wei.toString(), DECIMALS)).toLocaleString('en') }
function weiToEth(wei) { return Number(ethers.utils.formatUnits(wei.toString(), DECIMALS)) }
function ethToWei(eth) { return ethers.utils.parseUnits(eth.toString(), DECIMALS); }
function uiAddr(address) { return "{0x" + address.substring(2, 6).concat('...') + "}" ; }

describe("Build a test bed for ExploitMe.", function () {

	it("Test signers, defined in your hardhat.config.js, are ready.".green, async function () {
		[Alice, Bob, Charlie] = await ethers.getSigners();
		console.log("\tAlice's address = %s, balance = %s ETH.", uiAddr(addr = await Alice.getAddress()), weiToEthEn(await ethers.provider.getBalance(addr)) );
		console.log("\tBob's address = %s, balance = %s ETH.", uiAddr(addr = await Bob.getAddress()), weiToEthEn(await ethers.provider.getBalance(addr)) );
		console.log("\tCharlie's address = %s, balance = %s ETH.", uiAddr(addr = await Charlie.getAddress()), weiToEthEn(await ethers.provider.getBalance(addr)) );
	});

  it("Deploy ExploitMe contract.", async function () {
    const ExploitMe = await ethers.getContractFactory("ExploitMe", Alice);
    ExploitMeContract = await ExploitMe.deploy();
    await ExploitMeContract.deployed();

    var balance = await ethers.provider.getBalance(ExploitMeContract.address);
    console.log("\tbalance of ExploitMe: %s ETH.", balance);
  });

  it("Deploy Exploitor contract.", async function () {
    const Exploitor = await ethers.getContractFactory("Exploitor", Bob);
    ExploitorContract = await Exploitor.deploy(ExploitMeContract.address);
    await ExploitorContract.deployed();

    var amount = 10;
    var tx = await Bob.sendTransaction({
      to: ExploitorContract.address,
      value: ethToWei(amount),
    });
    await tx.wait();

    var balance = await ethers.provider.getBalance(ExploitorContract.address);
    console.log("\tbalance of Exploitor: %s ETH.", weiToEthEn(balance));
  });
});

describe("Deposit more than 1 ether on Explo in a single block.", function () {
  it("Deposit 1 ETH directly.", async function () {
    // var amount = 1;
    // var tx = await Alice.sendTransaction({
    //   to: ExploitMeContract.address,
    //   value: ethToWei(amount),
    // });
    // await tx.wait();
    // console.log("\tAlice sent %s ETH to ExploitMe.", amount.toLocaleString('En'));

    // var amount = 1;
    // var tx = await Alice.sendTransaction({
    //   to: ExploitMeContract.address,
    //   value: ethToWei(amount),
    // });
    // await tx.wait();
    // console.log("\tAlice sent %s ETH to ExploitMe.", amount.toLocaleString('En'));

    var balance = await ethers.provider.getBalance(ExploitMeContract.address);
    console.log("\tbalance of ExploitMe: %s ETH.", weiToEthEn(balance) );
  });

  it("Deposit in a trickish manner via the ExploitorConatract.", async function () {
 
    var balance0 = await ethers.provider.getBalance(ExploitMeContract.address);
    console.log("\tBalance0 = ", weiToEthEn(balance0));
 
    var tx = await ExploitorContract.depositTricky();
    await tx.wait();

    var balance1 = await ethers.provider.getBalance(ExploitMeContract.address);
    console.log("\tBalance1 = ", weiToEthEn(balance1));

  });
});
